<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="hard_gun_bool" label="Boolean" icon="SOP_boolean-2.0">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
sel_nodes = hou.selectedNodes()
geo = viewer.selectGeometry(use_existing_selection=False, initial_selection_type=hou.geometryType.Primitives)
sel_str = geo.mergedSelectionString()

mesh_length = 100

if sel_nodes and len(sel_nodes) == 2:

    choice_bool = hou.ui.displayMessage("Boolean Type:", buttons=("Substract", "Shatter", "Intersect", "Seam"))

    n_mesh = sel_nodes[1]
    n_mesh_2 = sel_nodes[0]

    n_mesh.setSelectableTemplateFlag(False)
    n_mesh.setTemplateFlag(False)

    # if mesh is an open curve'
    if n_mesh_2.type().name() == 'curve':
        n_mesh_2.parm('close').set(True)

        normal_node = n_mesh_2.createOutputNode("normal")
        normal_node.parm('type').set(0)
        normal_node.setColor( hou.Color((0.9, 0.72, 0.4)) )
        

        attr_prom = normal_node.createOutputNode("attribpromote")
        attr_prom.parm('inname').set('N')
        attr_prom.parm('inclass').set(2)
        attr_prom.parm('outclass').set(0)
        attr_prom.parm('method').set(2)
        attr_prom.parm('useoutname').set(True)
        attr_prom.parm('outname').set('pr_n')
        attr_prom.parm('deletein').set(True)
        attr_prom.setColor( hou.Color((0.9, 0.72, 0.4)) )
        
        trans_axis = attr_prom.createOutputNode("xformaxis")
        trans_axis.parm('origx').setExpression('$GCX')
        trans_axis.parm('origy').setExpression('$GCY')
        trans_axis.parm('origz').setExpression('$GCZ')
        trans_axis.parm('dirx').setExpression('@pr_n.x')
        trans_axis.parm('diry').setExpression('@pr_n.y')
        trans_axis.parm('dirz').setExpression('@pr_n.z')
        trans_axis.parm('trans').set(-mesh_length)
        trans_axis.parm('scale').set(0)
        trans_axis.setColor( hou.Color((0.9, 0.72, 0.4)) )
        

        extr_node = trans_axis.createOutputNode("polyextrude::2.0")
        extr_node.parm('outputback').set(True)
        extr_node.parm('xformfront').set(True)
        extr_node.parm('xformspace').set(0)
        extr_node.parm('translatez').set(mesh_length * 2)
        #extr_node.parm('dist').set(mesh_length * 2)
        extr_node.setColor( hou.Color((0.9, 0.72, 0.4)) )
    
        second_node = extr_node
    else:
        second_node = n_mesh_2

    choice = hou.ui.displayMessage("Mirror First Mesh?", buttons=("No", "X", "Y", "Z"))

    if choice in (1, 2, 3):
        choice_clip = hou.ui.displayMessage("Clip First Mesh?", buttons=("Yes", "No",))

        # add clip
        if choice_clip == 0:
            clip_node = second_node.createOutputNode("clip")

            if choice == 1:
                clip_node.parmTuple('dir').set((1, 0, 0))
            elif choice == 2:
                clip_node.parmTuple('dir').set((0, 1, 0))
            elif choice == 3:
                clip_node.parmTuple('dir').set((0, 0, 1))

            clip_node.setColor( hou.Color((0.8, 0.65, 0.9)) )

            mir_node = clip_node.createOutputNode("mirror")

        # no clip
        else:
            mir_node = second_node.createOutputNode("mirror")
            mir_node.parm('consolidatepts').set(False)

        if choice == 2:
            mir_node.parmTuple('dir').set( (0, 1, 0) )
        elif choice == 3:
            mir_node.parmTuple('dir').set( (0, 0, 1) )

        mir_node.setColor( hou.Color((0.8, 0.65, 0.9)) )
        second_node = mir_node
    

    b_group = n_mesh.createOutputNode("groupcreate")
    b_group.parm('groupname').set('hard_gun')
    b_group.parm('grouptype').set(0)
    b_group.parm('basegroup').set(sel_str)
    b_group.setColor( hou.Color((0.9, 0.65, 0.8)) )

    b_connect = b_group.createOutputNode("connectivity")
    b_connect.parm('connecttype').set(1)
    b_connect.setColor( hou.Color((0.8, 0.65, 0.9)) )
#    bool_node.moveToGoodPosition()

    b_block_begin = b_connect.createOutputNode("block_begin")
    b_block_begin.parm('method').set(1)
    b_block_begin.setColor( hou.Color((0.8, 0.65, 0.9)) )

    bool_node = b_block_begin.createOutputNode("boolean::2.0")
    bool_node.parm('agroup').set('hard_gun')
    #bool_node.parm('resolvea').set(False)
    bool_node.parm('resolveb').set(False)
    bool_node.parm('booleanop').set(2)
    #bool_node.parm('useabseamedges').set(True)
    bool_node.setNextInput(second_node)

    if choice_bool == 1:
        bool_node.parm('booleanop').set(3)
    elif choice_bool == 2:
        bool_node.parm('booleanop').set(1)
    elif choice_bool == 3:
        bool_node.parm('booleanop').set(6)

    bool_node.setColor( hou.Color((0.9, 0.65, 0.8)) )

    b_block_end = bool_node.createOutputNode("block_end")
    b_block_end.parm('itermethod').set(1)
    b_block_end.parm('method').set(1)
    b_block_end.parm('class').set(0)
    b_block_end.parm('useattrib').set(1)
    b_block_end.parm('attrib').set('class')
    b_block_end.parm('blockpath').set('../' + b_block_begin.name())
    b_block_end.parm('templatepath').set('../' + b_block_begin.name())
    b_block_end.setColor( hou.Color((0.8, 0.65, 0.9)) )

    b_block_begin.parm('blockpath').set('../' + b_block_end.name())

    # make new connections for the merge node
    for connects in n_mesh.outputConnections():
        out_node = connects.outputNode()
        in_idx = connects.inputIndex()
        out_idx = connects.outputIndex()

        if out_node.name() != b_group.name():
            out_node.setInput(out_idx, b_block_end, in_idx)
            out_node.moveToGoodPosition()

    #b_block_end.setDisplayFlag(True)
    #b_block_end.setRenderFlag(True)
    b_block_end.setCurrent(True, clear_all_selected=True)

else:
    msg = 'Select 2 SOP Nodes!'
    hou.ui.displayMessage(msg)]]></script>
  </tool>

  <tool name="hard_gun_prim" label="Prim" icon="SOP_box">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
#sel_nodes = hou.selectedNodes()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()

is_new_obj = False

# create object if it does not exists
if cur_obj.childTypeCategory().name() == 'Object':
    cur_obj = cur_obj.createNode('geo', run_init_scripts=True)
    cur_obj.deleteItems(cur_obj.children())
    cur_obj.moveToGoodPosition()
    cur_obj.setDisplayFlag(True)
    cur_obj.setCurrent(True, clear_all_selected=True)

    is_new_obj = True

choice = hou.ui.displayMessage("Primitive:", buttons=("Curve", "Box", "Tube", "Sphere", "Grid", "Circle"))

cur_snap = viewer.snappingMode()
viewer.setSnappingMode(hou.snappingMode.Prim)

# View Direction
view_dir = ( hou.Vector3(0, 0, 1) * hou.Matrix4(viewer.curViewport().viewTransform().extractRotationMatrix3()) ).normalized()
view_dir = (view_dir * cur_obj.worldTransform().inverted().transposed()).normalized()
view_x = abs(view_dir[0])
view_y = abs(view_dir[1])
view_z = abs(view_dir[2])

# get View Axis
view_axis = 'X'
if view_y > view_x and view_y > view_z:
    view_axis = 'Y'
elif view_z > view_x and view_z > view_y:
    view_axis = 'Z'


if choice != 0:
    # parent object for fixing object's transform
    parent_obj = cur_obj
    if is_new_obj:
            parent_obj = cur_obj.parent()

    positions = viewer.selectPositions(number_of_positions=2, connect_positions=True, show_coordinates=True, position_type=hou.positionType.WorldSpace)

    # fix object's transform
    if parent_obj.path() != '/obj':
        positions = (positions[0] * parent_obj.worldTransform().inverted(), positions[1] * parent_obj.worldTransform().inverted() )

    # set new position for new Object if it was created
    if is_new_obj:
            cur_obj.parmTuple('t').set(positions[0])

    prim_size = (positions[0] - positions[1]).length()
    if prim_size == 0:
        prim_size = 1

if choice == 0:
    box = cur_obj.createNode('curve')
    box.moveToGoodPosition()
    box.setCurrent(True, clear_all_selected=True)

elif choice == 1:
    box = cur_obj.createNode('box')
    box.parm('type').set(1)
    box.parmTuple('divrate').set((2,2,2))
    box.moveToGoodPosition()
    box.setCurrent(True, clear_all_selected=True)

    if not is_new_obj:
        box.parmTuple('t').set(positions[0])

    box.parmTuple('size').set( (prim_size * 2, prim_size * 2, prim_size * 2) )

    if view_axis == 'X':
        if is_new_obj:
            if positions[0] != positions[1]:
                cur_obj.parm('ry').set(90)

elif choice == 2:
    tube_nd = cur_obj.createNode('tube')
    tube_nd.moveToGoodPosition()
    tube_nd.setCurrent(True, clear_all_selected=True)

    if not is_new_obj:
        tube_nd.parmTuple('t').set(positions[0])

    tube_nd.parm('type').set(1)
    tube_nd.parm('rad1').set(prim_size)
    tube_nd.parm('rad2').set(prim_size)
    tube_nd.parm('height').set(prim_size)
    tube_nd.parm('cols').set(32)
    tube_nd.parm('cap').set(1)

    if view_axis == 'X':
        if is_new_obj:
            if positions[0] != positions[1]:
                cur_obj.parm('ry').set(90)
                tube_nd.parm('orient').set(2)
        else:
            tube_nd.parm('orient').set(0)
    elif view_axis == 'Z':
        if is_new_obj:
            if positions[0] != positions[1]:
                #cur_obj.parm('rx').set(90)
                tube_nd.parm('orient').set(2)
        else:
            tube_nd.parm('orient').set(2)

elif choice == 3:
    sphere = cur_obj.createNode('sphere')
    sphere.moveToGoodPosition()
    sphere.setCurrent(True, clear_all_selected=True)

    if not is_new_obj:
        sphere.parmTuple('t').set(positions[0])

    sphere.parm('type').set(2)
    sphere.parmTuple('rad').set( (prim_size, prim_size, prim_size) )
    sphere.parm('rows').set(16)
    sphere.parm('cols').set(32)

    if view_axis == 'X':
        if is_new_obj:
            if positions[0] != positions[1]:
                cur_obj.parm('ry').set(90)
                sphere.parm('orient').set(2)
        else:
            sphere.parm('orient').set(0)
    elif view_axis == 'Z':
        if is_new_obj:
            if positions[0] != positions[1]:
                #cur_obj.parm('rx').set(90)
                sphere.parm('orient').set(2)
        else:
            sphere.parm('orient').set(2)

elif choice == 4:
    grid = cur_obj.createNode('grid')
    grid.moveToGoodPosition()
    grid.setCurrent(True, clear_all_selected=True)

    if not is_new_obj:
        grid.parmTuple('t').set(positions[0])

    grid.parmTuple('size').set( (prim_size * 2, prim_size * 2) )
    grid.parm('rows').set(2)
    grid.parm('cols').set(2)

    if view_axis == 'X':
        if is_new_obj:
            if positions[0] != positions[1]:
                cur_obj.parm('ry').set(90)
                grid.parm('orient').set(0)
                grid.parm('sizex').set(-prim_size * 2)
        else:
            grid.parm('orient').set(1)

            if view_dir[0] < 0:
                grid.parm('sizex').set(-prim_size * 2)
            
    elif view_axis == 'Z':
        if is_new_obj:
            if positions[0] != positions[1]:
                #cur_obj.parm('rz').set(90)
                grid.parm('orient').set(0)
                grid.parm('sizex').set(-prim_size * 2)
        else:
            grid.parm('orient').set(0)

            if view_dir[2] > 0:
                grid.parm('sizex').set(-prim_size * 2)
    else:
        if view_dir[1] < 0 and not is_new_obj:
            grid.parm('sizex').set(-prim_size * 2)

elif choice == 5:
    circle = cur_obj.createNode('circle')
    circle.moveToGoodPosition()
    circle.setCurrent(True, clear_all_selected=True)

    if not is_new_obj:
        circle.parmTuple('t').set(positions[0])

    circle.parm('type').set(1)
    circle.parmTuple('rad').set( (-prim_size, prim_size) )
    circle.parm('divs').set(32)
    circle.parm('orient').set(2)

    if view_axis == 'X':
        if is_new_obj:
            if positions[0] != positions[1]:
                cur_obj.parm('ry').set(90)
                circle.parm('orient').set(0)
        else:
            circle.parm('orient').set(1)

            if view_dir[0] < 0:
                circle.parm('radx').set(prim_size)

    elif view_axis == 'Z':
        if is_new_obj:
            if positions[0] != positions[1]:
                #cur_obj.parm('rz').set(90)
                circle.parm('orient').set(0)
        else:
            circle.parm('orient').set(0)

            if view_dir[2] < 0:
                circle.parm('radx').set(prim_size)
    else:
        if view_dir[1] < 0 and not is_new_obj:
            circle.parm('radx').set(prim_size)

viewer.setSnappingMode(cur_snap)
]]></script>
  </tool>

  <tool name="hard_gun_clean" label="Clean Edges" icon="SOP_clean">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
sel_nodes = hou.selectedNodes()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()

if sel_nodes:
    cur_node = sel_nodes[-1]
else:
    cur_node = cur_obj.displayNode()

group = cur_node.createOutputNode("groupcreate")
group.parm('groupname').set('del')
group.parm('grouptype').set(2)
group.parm('groupbase').set(False)
group.parm('groupedges').set(True)
group.parm('domaxedgeangle').set(True)
group.parm('maxedgeangle').set(1)
group.setColor( hou.Color((0.7, 0.8, 0.7)) )

dis = group.createOutputNode("dissolve::2.0")
dis.parm('group').set('del')
dis.parm('compnorms').set(False)
dis.parm('reminlinepts').set(True)
dis.parm('coltol').set(180)
dis.parm('remunusedpts').set(True)
dis.parm('deldegeneratebridges').set(False)
dis.setColor( hou.Color((0.7, 0.8, 0.7)) )

#dis.setDisplayFlag(True)
#dis.setRenderFlag(True)
dis.setCurrent(True, clear_all_selected=True)]]></script>
  </tool>

  <tool name="hard_gun_merge" label="Merge" icon="SOP_merge">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="cop_viewer">
      <contextNetType>COP2</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[sel_nodes = hou.selectedNodes()

if sel_nodes and len(sel_nodes) > 1:

    merge_node = sel_nodes[-1].parent().createNode('merge')
    merge_node.moveToGoodPosition()

    for node in sel_nodes:
        merge_node.setNextInput(node)
        merge_node.setDisplayFlag(True)
        merge_node.setRenderFlag(True)
        merge_node.setCurrent(True, clear_all_selected=True)

        # make new connections for the merge node
        for connects in node.outputConnections():
            out_node = connects.outputNode()
            in_idx = connects.inputIndex()
            out_idx = connects.outputIndex()
    
            if out_node.name() != merge_node.name():
                out_node.setInput(out_idx, merge_node, in_idx)
                out_node.moveToGoodPosition()

    merge_node.moveToGoodPosition()]]></script>
  </tool>

  <tool name="hard_gun_part_mesh" label="PartMesh" icon="SOP_blast">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()

if sel_str and geo.geometryType() == hou.geometryType.Primitives:

    main_node = cur_obj.displayNode()

    blast_2 = main_node.createOutputNode('blast', node_name='blast_base')
    blast_2.parm('negate').set(False)
    blast_2.parm('group').set(sel_str)

    blast_1 = main_node.createOutputNode('blast', node_name='blast_part')
    blast_1.parm('negate').set(True)
    blast_1.parm('group').set(sel_str)

    final_merge = main_node.parent().createNode("merge")

    final_merge.setNextInput(blast_2)
    final_merge.setNextInput(blast_1)


    final_merge.moveToGoodPosition()

    final_merge.setDisplayFlag(True)
    final_merge.setRenderFlag(True)
    final_merge.setCurrent(True, clear_all_selected=True)
    
    # make new connections for the merge node
    for connects in main_node.outputConnections():
        out_node = connects.outputNode()
        in_idx = connects.inputIndex()
        out_idx = connects.outputIndex()

        if out_node.name() not in ( blast_2.name(), blast_1.name() ):
            out_node.setInput(out_idx, final_merge, in_idx)
            out_node.moveToGoodPosition()
]]></script>
  </tool>

  <tool name="hard_gun_extract_to_object" label="Extract" icon="SHELF_extract_object">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()
sel_nodes = hou.selectedNodes()

if sel_str and sel_nodes and geo.geometryType() == hou.geometryType.Primitives:

    main_node = sel_nodes[-1]


    the_pre_obj = main_node.parent()
    the_obj = None
    for i in range(1000):
        if the_pre_obj.type().category() == hou.objNodeTypeCategory():
            the_obj = the_pre_obj
            break

        the_pre_obj = the_pre_obj.parent()
        

    if the_obj:
        parent_obj = the_obj.parent()

        null_nd = main_node.createOutputNode('null')
        null_nd.setColor( hou.Color((0.95, 0.5, 0.4)) )
    
        blast_1 = null_nd.createOutputNode('blast')
        blast_1.parm('group').set(sel_str)
        blast_1.setColor( hou.Color((0.95, 0.5, 0.4)) )

        blast_1.setDisplayFlag(True)
        blast_1.setRenderFlag(True)
        blast_1.setCurrent(True, clear_all_selected=True)

        # make new connections for the merge node
        for connects in main_node.outputConnections():
            out_node = connects.outputNode()
            in_idx = connects.inputIndex()
            out_idx = connects.outputIndex()
    
            if out_node.name() not in (blast_1.name(), null_nd.name()):
                out_node.setInput(out_idx, blast_1, in_idx)
                out_node.moveToGoodPosition()

        #  create new object
        new_obj = parent_obj.createNode('geo', the_obj.name(), run_init_scripts=True)

        new_obj.parmTuple('t').set(the_obj.parmTuple('t').eval())
        new_obj.parmTuple('r').set(the_obj.parmTuple('r').eval())
        new_obj.parmTuple('s').set(the_obj.parmTuple('s').eval())
        new_obj.parmTuple('p').set(the_obj.parmTuple('p').eval())
        new_obj.parmTuple('pr').set(the_obj.parmTuple('pr').eval())
        new_obj.parm('scale').set(the_obj.parm('scale').eval())

        new_obj.deleteItems(new_obj.children())
        #new_obj.parm('use_dcolor').set(False)
        new_obj.moveToGoodPosition()

        obj_merge = new_obj.createNode("object_merge")
        obj_merge.parm('objpath1').set(obj_merge.relativePathTo(null_nd))
        obj_merge.parm('xformtype').set(1)
        obj_merge.moveToGoodPosition()

        blast_2 = new_obj.createNode('blast')
        blast_2.parm('group').set(sel_str)
        blast_2.setNextInput(obj_merge)
        blast_2.parm('negate').set(True)
        blast_2.moveToGoodPosition()

        blast_2.setHardLocked(True)
        blast_2.setDisplayFlag(True)
        blast_2.setRenderFlag(True)
        blast_2.setCurrent(True, clear_all_selected=True)]]></script>
  </tool>

  <tool name="hard_gun_view_subdive" label="View Subdive" icon="SOP_subdivide">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

# Old
#node = soptoolutils.genericTool(kwargs, 'mifth_subdive_plus')

# New
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()
sel_nodes = hou.selectedNodes()

if sel_nodes and sel_nodes[-1].type().category().name() == 'Object':
    display_val = sel_nodes[-1].parm('viewportlod').eval()

    if display_val == 0:
        for node in sel_nodes:
            node.parm('viewportlod').set(5)
    else:
        for node in sel_nodes:
            node.parm('viewportlod').set(0)

elif cur_obj.type().category().name() == 'Object':
    display_val = cur_obj.parm('viewportlod').eval()

    if display_val == 0:
        cur_obj.parm('viewportlod').set(5)
    else:
        cur_obj.parm('viewportlod').set(0)]]></script>
  </tool>

  <toolshelf name="hard_gun_modeling" label="HGSop">
    <memberTool name="hard_gun_prim"/>
    <memberTool name="hard_gun_bool"/>
    <memberTool name="hard_gun_merge"/>
    <memberTool name="hard_gun_part_mesh"/>
    <memberTool name="hard_gun_clean"/>
    <memberTool name="hg_clean_topology"/>
    <memberTool name="hard_gun_bevel_setup"/>
    <memberTool name="hard_gun_extract_to_object"/>
    <memberTool name="hard_gun_view_subdive"/>
    <memberTool name="hard_gun_view_subdive_2"/>
    <memberTool name="deselect_hlf"/>
  </toolshelf>

  <tool name="hg_clean_topology" label="Clean Mesh" icon="SOP_clean">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
sel_nodes = hou.selectedNodes()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()

if sel_nodes:
    cur_node = sel_nodes[-1]
else:
    cur_node = cur_obj.displayNode()

doc = cur_node.createOutputNode("polydoctor")
doc.parm('manyedges').set(0)
doc.setColor( hou.Color((0.7, 0.8, 0.7)) )

del_nd = doc.createOutputNode("delete")
del_nd.parm('groupop').set(2)
del_nd.parm('negate').set(1)
del_nd.parm('filter').setExpression("isclosed(opinputpath('.', 0), $PR)")
del_nd.setColor( hou.Color((0.7, 0.8, 0.7)) )

fix_n = del_nd.createOutputNode("attribwrangle")
fix_n.parm('class').set('vertex')
fix_n.parm('snippet').set('if (hasvertexattrib(0, "N") == 1) {\nif (length(@N) == 0.0) { @N = set(0,1,0); }\n@N = normalize(@N); }\n\n')
fix_n.setColor( hou.Color((0.7, 0.8, 0.7)) )

fix_n.setDisplayFlag(True)
fix_n.setRenderFlag(True)
fix_n.setCurrent(True, clear_all_selected=True)]]></script>
  </tool>

  <tool name="hard_gun_bevel_setup" label="Bevel Setup" icon="SOP_polybevel">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
sel_nodes = hou.selectedNodes()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()

if sel_nodes:
    cur_node = sel_nodes[-1]
else:
    cur_node = cur_obj.displayNode()

choice = hou.ui.displayMessage("Bevel Mode:", buttons=("Basic", "Advanced"))

if choice == 1:
    point = cur_node.createOutputNode("attribexpression")
    point.parm('preset1').set(0)
    point.parm('name1').set('bevel_pscale')
    point.parm('type1').set('float')
    point.parm('valf_1').set(30)
    point.parm('snippet1').set('value')
    point.setColor( hou.Color((0.145, 0.667, 0.557)) )

    bev = point.createOutputNode("polybevel::2.0")
    bev.parm('offset').set(0.0001)
    bev.parm('usepointscale').set(True)
    bev.parm('pointscaleattr').set('bevel_pscale')
    
else:
    bev = cur_node.createOutputNode("polybevel::2.0")
    bev.parm('offset').set(0.003)

bev.parm('grouptype').set(2)
bev.parm('ignoregrpflat').set(True)
bev.parm('groupflatangle').set(15)
bev.parm('allowvertexsplits').set(True)
bev.parm('divisions').set(3)
bev.parm('usecornerprims').set(True)
bev.parm('useedgeprims').set(True)
bev.setColor( hou.Color((0.145, 0.667, 0.557)) )

nor_1 = bev.createOutputNode("normal")
nor_1.parm('group').set('bevelprims')
nor_1.parm('cuspangle').set(60)
nor_1.parm('method').set(2)
nor_1.setColor( hou.Color((0.145, 0.667, 0.557)) )

nor_2 = nor_1.createOutputNode("normal")
nor_2.parm('group').set('!bevelprims')
nor_2.parm('cuspangle').set(15)
nor_2.parm('method').set(2)
nor_2.setColor( hou.Color((0.145, 0.667, 0.557)) )

nor_2.setDisplayFlag(True)
nor_2.setRenderFlag(True)
nor_2.setCurrent(True, clear_all_selected=True)]]></script>
  </tool>

  <tool name="hard_gun_view_subdive_2" label="View Subdive 2" icon="SOP_subdivide">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
sel_nodes = hou.selectedNodes()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()

if sel_nodes:
    cur_node = sel_nodes[-1]
else:
    cur_node = cur_obj.displayNode()

# OBJ
if sel_nodes and sel_nodes[-1].type().category().name() == 'Object':

    for sel_node in sel_nodes:
        sel_node.parm('viewportlod').set(0)

        if sel_node.displayNode().type().name() == 'subdivide':
            sel_node.deleteItems([sel_node.displayNode()])

        else:
            sub_node = sel_node.displayNode().createOutputNode('subdivide')
            sub_node.parm('iterations').set(2)
        
            sub_node.setDisplayFlag(True)
            sub_node.setRenderFlag(True)

#        sub_node.setCurrent(True, clear_all_selected=True)

#    if display_val == 0:
#        for node in sel_nodes:
#            node.parm('viewportlod').set(5)
#    else:
#        for node in sel_nodes:
#            node.parm('viewportlod').set(0)

# SOP
elif cur_obj.type().category().name() == 'Object':
    if cur_node.type().name() != 'subdivide':
        sub_node = cur_node.createOutputNode('subdivide')
        sub_node.parm('iterations').set(2)

        # make new connections for the merge node
        for connects in cur_node.outputConnections():
            out_node = connects.outputNode()
            in_idx = connects.inputIndex()
            out_idx = connects.outputIndex()
    
            if out_node.name() != sub_node.name():
                out_node.setInput(out_idx, sub_node, in_idx)
                out_node.moveToGoodPosition()

        sub_node.setCurrent(True, clear_all_selected=True)
        if cur_node == cur_obj.displayNode():
            sub_node.setDisplayFlag(True)
            sub_node.setRenderFlag(True)
            sub_node.setCurrent(True, clear_all_selected=True)

    else:
        cur_node.inputConnections()[0].inputNode().setCurrent(True, clear_all_selected=False)
        cur_node.destroy()]]></script>
  </tool>

  <tool name="deselect_hlf" label="Deselect_Half" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geos = viewer.selectGeometry()
#sel_str = geos.mergedSelectionString()
sel_nodes = hou.selectedNodes()

if sel_nodes and geos.geometryType() == hou.geometryType.Primitives:

    for el in geos.selections():
        prims = el.prims(sel_nodes[0].geometry())
        numz = ""

        for prim in prims:
            if prim.boundingBox().center()[0] < 0:
                numz += " " + str(prim.number())

        viewer.selectGeometry(use_existing_selection=False, initial_selection=numz, initial_selection_type=hou.geometryType.Primitives, consume_selections=False, ordered=True)
                ]]></script>
  </tool>
</shelfDocument>
